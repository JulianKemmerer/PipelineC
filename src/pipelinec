#!/usr/bin/env python3
# -*- coding: utf-8 -*- 

import argparse
import os
import sys

sys.dont_write_bytecode = True

import C_TO_LOGIC
import OPEN_TOOLS
import SIM
#import CLANG_TO_LOGIC
import SYN

# Defaults
default_c_file = C_TO_LOGIC.REPO_ABS_DIR() + "/main.c"

# Parse args
parser = argparse.ArgumentParser(description="PipelineC:")
parser.add_argument("c_file", type=str, default=default_c_file, nargs="?",
                    help=f"C file containing main functions. Default is {default_c_file}.")
parser.add_argument("--out_dir", type=str, default=None,
                    help=f"Output directory. Default is a new directory inside the current directory.")
parser.add_argument("--mult", type=str, default=C_TO_LOGIC.MULT_STYLE_INFERRED,
                      help=f"infer|fabric : Global multiplier style. Default to 'inferring' multiplier DSP primitives. Alternatively implement multipliers in FPGA fabric.")
parser.add_argument("--comb", help="Combinatorial logic results only. No autopipelining.", action="store_true")
parser.add_argument("--sim", help="Start simulation using final (maybe autopipelined) versions of functions.", action="store_true")
parser.add_argument("--sim_comb", help="Start simulation using just comb. logic versions of functions. Equivalent to --sim --comb.", action="store_true")
parser.add_argument("--edaplay", help="Setup simulation files for use on edaplayground.com.", action="store_true")
parser.add_argument("--modelsim", help="Setup simulation files for use with Modelsim.", action="store_true")
parser.add_argument("--cxxrtl", help="Setup simulation files for use with GHDL+Yosys+CXXRTL.", action="store_true")
parser.add_argument("--verilator", help="Setup simulation files for use with GHDL+Yosys+Verilator.", action="store_true")
parser.add_argument("--main_cpp", type=str, default=None,help=f"Specify an existing main C++ file for simulators such as CXXRTL and Verilator.")
parser.add_argument("--coarse",
                      help="Do only a single coarse grain autopipelining sweep (as opposed to default of several multi-level coarse sweeps).",
                      action="store_true")
parser.add_argument("--start", type=int, default=None, help="When doing a --coarse sweep, start from START cycles latency.")
parser.add_argument("--stop", type=int, default=None, help="When doing a --coarse sweep, stop at STOP cycles latency.")
parser.add_argument("--sweep", help="When doing a --coarse sweep, sweep clock by clock upwards increasing latency.", action="store_true")   
parser.add_argument("--yosys_json", help="Just output the json from yosys.", action="store_true")
args = parser.parse_args()

# Combine certain args
if args.sim and args.comb:
  args.sim_comb = True
if args.sim_comb:
  args.sim = True
  args.comb = True

# Resolve C file arg
c_file = os.path.abspath(args.c_file)

# Apply arguments to global modules

# Output dir:
#   Use what user provided
#   Or create a new dir for each run by default
if args.out_dir is not None:
  SYN.SYN_OUTPUT_DIRECTORY = os.path.abspath(args.out_dir)
else:
  # Or create a unique dir for this run in current dir
  c_filename = os.path.basename(c_file)
  SYN.SYN_OUTPUT_DIRECTORY = os.path.abspath("./" + SYN.OUTPUT_DIR_NAME + "_" + c_filename + "_" + str(os.getpid()))
# Multiplier style
C_TO_LOGIC.MULT_STYLE = args.mult
# Open tools flag to not run nextpnr
OPEN_TOOLS.YOSYS_JSON_ONLY = args.yosys_json
# Sim tool selection
SIM.SET_SIM_TOOL(args)

# Ugh some python versions dont obey the coding comment at top of file?
try:
  print("""
██████╗ ██╗██████╗ ███████╗██╗     ██╗███╗   ██╗███████╗ ██████╗
██╔══██╗██║██╔══██╗██╔════╝██║     ██║████╗  ██║██╔════╝██╔════╝
██████╔╝██║██████╔╝█████╗  ██║     ██║██╔██╗ ██║█████╗  ██║     
██╔═══╝ ██║██╔═══╝ ██╔══╝  ██║     ██║██║╚██╗██║██╔══╝  ██║     
██║     ██║██║     ███████╗███████╗██║██║ ╚████║███████╗╚██████╗
╚═╝     ╚═╝╚═╝     ╚══════╝╚══════╝╚═╝╚═╝  ╚═══╝╚══════╝ ╚═════╝
""", flush=True)
except UnicodeEncodeError as e:
  print("Old python versions do not obey utf-8 file encoding...")
  print(e)

print("Output directory:", SYN.SYN_OUTPUT_DIRECTORY)
print("================== Parsing C Code to Logical Hierarchy ================================", flush=True)
# Do parsing
print("Parsing:",c_file, flush=True)
parser_state = C_TO_LOGIC.PARSE_FILE(c_file)
#CLANG_TO_LOGIC.PARSE_FILE(c_file)
#print("TEMP END")
#sys.exit(0)

print("================== Writing Resulting Logic to File ================================", flush=True)
C_TO_LOGIC.WRITE_0CLK_FINAL_FILES(parser_state)

# Here is a good point to check basic single cycle/comb logic functionality before pipelining
SIM.DO_OPTIONAL_SIM(args.sim_comb, parser_state, args)
  
if not args.comb and not args.yosys_json:
  print("================== Adding Timing Information from Synthesis Tool ================================", flush=True)
  parser_state = SYN.ADD_PATH_DELAY_TO_LOOKUP(parser_state)

print("================== Beginning Throughput Sweep ================================", flush=True)
multimain_timing_params = SYN.DO_THROUGHPUT_SWEEP(
  parser_state, 
  coarse_only=args.coarse, 
  starting_guess_latency=args.start, 
  do_incremental_guesses=not(args.sweep), 
  comb_only=args.comb,
  stop_at_latency=args.stop
)

print("================== Writing Results of Throughput Sweep ================================", flush=True)
SYN.WRITE_FINAL_FILES(multimain_timing_params, parser_state)
print("Done.", flush=True)

# Start simulation on final VHDL
SIM.DO_OPTIONAL_SIM(args.sim, parser_state, args, multimain_timing_params)

# No need to scare folks with my big dumb todo list printing...
"""
TODO:
Victor's RT
  UART button fun
  See uart bin file
  Film video w/ uart capture
Do UART in clk() style, compare to original style VIDEO? make video out of comparison?
  Do fsm style write up page, include hierarchy of function resuse/single instance
  Refresh hdl-style original uart
  RX then a TX in half duplex loopback, but end saying best to have two always runing MAINs
Try to fix/refresh AWS DMA demo
  / use PCIe FPGA from Quarky for same demo?
  Solve AWS multithreaded off by one or two problem...
Publish math packages 0,1,2..n clock versions of things for all sorts of devices
  Automate with --math_pkg <func name> --part <FPGA PART>
    Does incremental coarse sweep from 0
  Setup demo verification of all N clocks of output 
  Setup collection of resource util too
  Setup final packaging (single file vhdl?)
  Can publish arbitrary with float points popular formats, i.e. wiki page
  Automate u24,rsqrtf demo cpp
Do video walkthrough of Pong demo?
Next ML demo?
  Email TinyML/HLS4ML?
  Recreate mnist demo using hls4ml or idk some CIRCT stuff?
Do more basic tutorials like nandland+hdlbits
Try to restructure FSM style parsing + building of states list to be bottom up ~ last states first
  as opposed to top down, first states first, since asking next_state.is_something() isnt valid since next state is shell, to be filled in
Cache sliced variants with some ~epsilon of equality for close slices to predict critical path?
Can XLS C++ -> XLS IR be used to map XLS IR to PipelineC / replace it?
Can XLA for GPU/TPU partitioning help with PipelineC?
SiliconCompiler/edalize to automate/cloud runs of vivado+import of results into python (and other eda tools)
Try to go from PipelineC directly to Verilator (RTLIL probably)(what about LLHD?)
  Look into intermediate representation such FIRRTL (what Yosys uses?) instead, eventually get rid of VHDL...
Guitar i2s audio visualizer of some sort?
Put a risc(v? CHIPS2.0?) core (in pipelinec) along side accelerator in pipeline, + host OS on FOSIX NoC
Let __vhdl__ (and wrapping func pragmad) be used to describe comb logic that plus IO regs the syn tool will auto pipeline
Implement DIAMOND PNR run?
Detect/document function types ...ex. Detect single instance funcs and record logic.is_single_inst, maybe need to add pragmas to specify/force
How does multiple ins and out over time work in clk step style?  (not hdl wrapper)
Refactor fosix stuff:
  do demo 1b wide data bus
    ^ something stream based + varable length not uart fixed msg size
  Do VGA driven from NoC element
MAIN pragmas that take hier names/namesspaces -   main.multiclkdomain1 ?
Static locals inside {} with #pragma global or something? infer state reg submodule ports into and out of {}, etc
^Allow mix of volatile and non-volatile globals by isolating logic using globals (with {}?) (as is done now by putting in other global func)?
volatile FEEDBACK makes sense just like regular vol static - just removes reg
Only syn modules that are used in modules that need pipelining (will need pipeline map of delay)
Fix idenfiying C AST nodes with coord+hash - need to know full parent tree nodes path
Make reset module for Arty
Try small python ast parsing based example - Pypeline?
Go AST? 
Rust AST? rustc -Z ast-json, traverse the json? Do minimum viable?
Aetherling style re/unrolling of logic into different timings/util
Put modelsim files all in syn out dir, not in cwd from launching tool (w/ reset of modelsim proj files)
Do write up on one or two optimizations to DKs riscv
Fix fine grain sweep to work again after coarse/middle out sweep
Do tagged unions as union type w/ gen tag type, and gen funcs taking union type and tag, decoding to struct type
Set write-back/'volatile feedback'? connection markers in code that make volatiles work like CPU pipeline feedback to specific stages C code labels and gotos?
Long code with lots of ifs is slow because of deep copy of if logic graph branches - fix
Come on do sanity check for reserved words. Append _restricted?
Add pragmas for syn tool command lines options
Finish chipscope+virtual io debug thing (write probes) + add w/ pass through regular streaming uart io?
^Full board arty example using ddr, sw,leds, uart for debug+stream, etc
Continue completing clock crossing features, tool support (volatile/pipelined logic wires w/ clock enable double check)
How to remove excess io regs from middle out sweep?
Redo G/LT/E to use add/sub and <0==sign bit, write in PipelineC? better than hand pipelining vhdl
^ Redo all add sub to use single pipelined adder with twos complement invert set carryin=1 stuff?
^ Maybe redo pipelined binary trees instead of equal bit sequential stages? Bad for slicing.. probably can work, test
Gen flattened slv top level ports, w/ internal type conversions -W.
Karatsuba algo for mult - need to recursive gen big mult funcs for differing bit widths
Check for non global functions that call global functions when evaluating const
^ Dont store timing params for zero clocks - no timing params assumed default, save ram, probably faster might not need to do below.
Parallelize parsing of func def bodies since indepdent of other func def bodies?
Reorg ref tok cover checking and removal (collapsing,etc too?) into tree based data struct
Support AWS PCIM port - need to write kernel driver and maybe user space wrapper?
Relative/'local' clock crossings - not absolute specified in main/pragmas? Can point at any non-single-inst function to run in requested relative clock...?
Expose latencies of each instance as a constant for use in external vhdl package - not for use in pipelinec code
Fix to remove useless int casts, ex. uint32->uint32 and do casts of ints as vhdl expr not funcs
Do auto gen unsigned to array functions now that support array_N_t
CONST REF intern gen code: Use gcc array init instead of for loop many const ref tok assignments that are bulky?
Add timing info via syn top level without flatten, then report timing on each module? No IO regs so will paths make sense? / doesnt work for combinatorial logic? Hah syn weird top level with _top version of everything?
When doing const ref read with many ref toks, make new 'assignment' alias of new reduced wire so future reads of the same const ref can use the single wire
Add look ahead for built in functions so cast can be inferred
Remove RESOLVE_CONST_ARRAY_REF from C_AST_REF_TO_TOKENS, and max var ref / var assignement optimize to const ref and const assignment... complicated...
Consider doing constant optimization as second pass (faster than current way of optimizing as part of first pass?)? How to unroll const for-loop then?
Pragmas for reset stuff, tag global regs for reset, special clock domain handling stuff with PLL lock and such?
Allow resource reuse if can 2x,3x,etc clock a pipeline to accomplish the same 1x,II=1 pipeline task (II<1 means down clocking by 2,3, etc?)
Try big const ref funcs (not vhdl expr) in modules instead of all in one file where used? removes repeated code for faster elab?
Built in raw vhdl funcs for array copy / manipulation instead of many const rek tok loops. Built in funcs can return arrays (handled internally) but user can write such funcs  uint8*4_t[N/4] = uint8_arrayN_by_4_le(uint8_t x[N])
Auto gen <func_name>_t type which is inputs to function func(x,y,z)  struct <func_name>_t {x,y,z}
Syn each pipeline stage ... this is hard... like slicing zero clock logic 
Uh ceil log2 stuff doesnt work for huge consts determining bit width in python? 0x800000000000008b
Const SR/SL as vhdl funcs instead of modules..thought this was done...
Redo old code to use for loops instead of generated code (ex. float div)
Document fundamental time v.s space trade off (sum example?)
Extern keyword for (same-clock?) clock crossings?
Allow values form code into __vhdl__ funcs (vhdl isnt entire module) like printf support?
Use yosys ltp of primitives in longest topological path for faster initial estimates?
General pipelineable with IO regs if used in pure func RAM_SP_RF func
Optimize away static consts that look like regs w init values - allow local init of 'const' vars?
Explore Vivado's retiming option - thought it was on by default... it isnt because it seem beneficial <20% of the time?
Explore Vivado's report_pipeline_analysis instead of following timing reports
Fix not to write empty vhdl io reg processes for void() mains for clock cross ports only
Try not allowing add/sub of certain slow bits per stage -> need to syn all the adders and prioritize
Next not-fine sweep? Cant just blindly slice into pieces - do insertion based on chunks of delay for slice-able (not fixed,global) modules
Have multiple paths reported per clock domain/main func
No good? reason to combine variable latency array of regs for pipelining and state regs in same record - flat, human like, easier to read (maybe ok since those regs arent IO?)
Compiler pass to make sequences ex. ORS, into binary trees
Add auto switch between inferred and fabric mult, etc?
Do more DSP prim functions ideally with backing fabric c code for if on different device
Do built in Q number types
Could make an undefined/Xs constant only meaningful in synthesis
Default dont put IO regs around single inst funcs in mid out sweep?
Add support for IO regs from timing params to primitives (fix intel mult to prefer manual io since LPM_PIPELINE isnt precise enough)
Add compound one = {1}; to init to all bits=1
Do auto switch of static array access (need ot look at RMW pattern) into RAMs?
Slight optimization from not rendering binary ops with always matching signedness? (render i32 AND u16, as opposed to casting to i17)
Solve generating many pipelined slice variants same for raw hdl bits per stage
Remove extra regs that appear in funcs that had RAM prim funcs in them(now regs inside ram module)
Optimize away constant-enabled instances of funcs w/ clock enables through long pipelines? CE on pipelines make sense even?
Replace _all_ old WIRE use with new shared globals
Get rid of WIRE use in single inst fsm style arb gen code
Check auto pipeline and clock crossing read+write behavior
Need to re-do clock crossings/wires used in pipelineable logic to be like volatiles reading inputs always in stage 0, outputs from last stage
  ^ Mostly already true for no-flow control crossings in functions with no other inputs and outputs, clock crossings are the io (and no issue for 0clk comb functions)
"""

